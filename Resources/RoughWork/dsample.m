% downsample image using gaussian filter.
im = imread('image.jpg'); %load image
if size(im,3)==3 %check rgb
im=rgb2gray(im);
end
figure;
imshow(im);
[h,w]=size(im);
im = im2double(im);
gf=zeros(h,w); % empty matrix to store filtered image
for i=2:h-1 %gaussian filtering process
for j=2:w-1 % {[1,2,1],[2,4,2],[1,2,1]}/16 gaussian kernal matrix
sum=0;
sum=sum+im(i-1,j-1);
sum=sum+im(i-1,j)*2;
sum=sum+im(i-1,j+1);
sum=sum+im(i,j-1)*2;
sum=sum+im(i,j)*4;
sum=sum+im(i,j+1)*2;
sum=sum+im(i+1,j-1);
sum=sum+im(i+1,j)*2;
sum=sum+im(i+1,j+1);
gf(i,j) =sum/16;
end
end
figure;
imshow(mat2gray(gf));
fid = fopen('text.txt', 'wt'); %Opens text.txt as file for write
d=2; % downsample factor
s=zeros(128,128); % reduced image matrix
%gf=im2double(gf);
for m=1:2:255 %calculate avarage
for n=1:2:255
pix=0;
pix=(gf(m,n)+gf(m,n+1)+gf(m+1,n)+gf(m+1,n+1))/4;
fprintf(fid, '%s ', pix);
s((m+1)/2,(n+1)/2)=pix; %reduced matrix index and pixel to store
end
fprintf(fid, '\n');
end
figure;
imshow(s);
modifiedImage = s(2:127, 2:127);
figure
imshow(modifiedImage);
fclose(fid);


%% Creates output image from the hex file generated by FPGA
close all;
%% Show the original image
principal_image = imread('grayImage.jpg');
%% Open the hex file
hexFile = fopen('Image.hex', 'r');
%% Read the hex file to an image and close it
img = fscanf(hexFile, '%x', [1 inf]);
fclose(hexFile); 
%% Reshape the image to a 256 x 256 image and display
outImg = reshape(img,[256 256]);
outImg = imrotate(outImg, 90);
figure, imshow(outImg,[]);
%% Extract the final output and save it
finalRender = mat2gray(outImg(130:255, 1:126));
imwrite((finalRender), 'finalImage.jpg');
figure, imshow(finalRender,[]);
close all;
%% %%%%%%%%%%%%%%%%%%%%% ANALYSE %%%%%%%%%%%%%%%%%%%% %%
Difference = abs(finalRender - modifiedImage).^2;
SUM = 0;
for ii = 1:1:126
    for jj = 1:1:126
        SUM = SUM + (Difference(ii, jj));
    end
end

disp(SUM);